// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: comments.sql

package generated

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (body, user_id, post_id)
VALUES ($1, $2, $3) RETURNING id, body, user_id, post_id, created_at
`

type CreateCommentParams struct {
	Body   string `json:"body"`
	UserID int32  `json:"user_id"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Body, arg.UserID, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE
FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getCommentById = `-- name: GetCommentById :one
SELECT id, body, user_id, post_id, created_at
FROM comments
WHERE id = $1
`

func (q *Queries) GetCommentById(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const getCommentsAndAuthorsByPostId = `-- name: GetCommentsAndAuthorsByPostId :many
SELECT c.id as comment_id,
       c.body,
       c.user_id,
       c.post_id,
       c.created_at,
       u.first_name,
       u.last_name,
       u.avatar_url
FROM comments c
         JOIN user_avatar_view u
              ON c.user_id = u.id
WHERE c.post_id = $1
ORDER BY created_at LIMIT $2
OFFSET $3
`

type GetCommentsAndAuthorsByPostIdParams struct {
	PostID int32 `json:"post_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetCommentsAndAuthorsByPostIdRow struct {
	CommentID int32     `json:"comment_id"`
	Body      string    `json:"body"`
	UserID    int32     `json:"user_id"`
	PostID    int32     `json:"post_id"`
	CreatedAt time.Time `json:"created_at"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	AvatarUrl string    `json:"avatar_url"`
}

func (q *Queries) GetCommentsAndAuthorsByPostId(ctx context.Context, arg GetCommentsAndAuthorsByPostIdParams) ([]GetCommentsAndAuthorsByPostIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsAndAuthorsByPostId, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsAndAuthorsByPostIdRow
	for rows.Next() {
		var i GetCommentsAndAuthorsByPostIdRow
		if err := rows.Scan(
			&i.CommentID,
			&i.Body,
			&i.UserID,
			&i.PostID,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
