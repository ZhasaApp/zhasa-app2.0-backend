// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_brand.sql

package generated

import (
	"context"
	"time"
)

const getUserBrand = `-- name: GetUserBrand :one
SELECT ub.id AS user_brand
FROM user_brands ub
WHERE ub.user_id = $1
  AND ub.brand_id = $2
`

type GetUserBrandParams struct {
	UserID  int32 `json:"user_id"`
	BrandID int32 `json:"brand_id"`
}

func (q *Queries) GetUserBrand(ctx context.Context, arg GetUserBrandParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserBrand, arg.UserID, arg.BrandID)
	var user_brand int32
	err := row.Scan(&user_brand)
	return user_brand, err
}

const getUserBrandGoal = `-- name: GetUserBrandGoal :one
SELECT COALESCE(goals.value, 0)
FROM user_brand_sale_type_goals goals
WHERE goals.user_brand = $1
  AND goals.sale_type_id = $2
  AND goals.from_date = $3
  AND goals.from_date = $4
`

type GetUserBrandGoalParams struct {
	UserBrand  int32     `json:"user_brand"`
	SaleTypeID int32     `json:"sale_type_id"`
	FromDate   time.Time `json:"from_date"`
	FromDate_2 time.Time `json:"from_date_2"`
}

func (q *Queries) GetUserBrandGoal(ctx context.Context, arg GetUserBrandGoalParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserBrandGoal,
		arg.UserBrand,
		arg.SaleTypeID,
		arg.FromDate,
		arg.FromDate_2,
	)
	var value int64
	err := row.Scan(&value)
	return value, err
}

const getUserRank = `-- name: GetUserRank :one
WITH RankedUsers AS (SELECT user_id,
                            brand_id,
                            ratio,
                            ROW_NUMBER() OVER (ORDER BY ratio DESC) as rank
                     FROM user_brand_sale_type_ratio
                     WHERE brand_id = $1
                       AND from_date = $2
                       AND to_date = $3)

SELECT rank
FROM RankedUsers
WHERE user_id = $4
`

type GetUserRankParams struct {
	BrandID  int32     `json:"brand_id"`
	FromDate time.Time `json:"from_date"`
	ToDate   time.Time `json:"to_date"`
	UserID   int32     `json:"user_id"`
}

func (q *Queries) GetUserRank(ctx context.Context, arg GetUserRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserRank,
		arg.BrandID,
		arg.FromDate,
		arg.ToDate,
		arg.UserID,
	)
	var rank int64
	err := row.Scan(&rank)
	return rank, err
}

const getUsersOrderedByRatioForGivenBrand = `-- name: GetUsersOrderedByRatioForGivenBrand :many
SELECT u.id, u.first_name, u.last_name, r.ratio
FROM users u
         JOIN user_brand_sale_type_ratio r ON u.id = r.user_id
WHERE r.brand_id = $1
  AND r.from_date = $2
  AND r.to_date = $3
ORDER BY r.ratio DESC
OFFSET $4 LIMIT $5
`

type GetUsersOrderedByRatioForGivenBrandParams struct {
	BrandID  int32     `json:"brand_id"`
	FromDate time.Time `json:"from_date"`
	ToDate   time.Time `json:"to_date"`
	Offset   int32     `json:"offset"`
	Limit    int32     `json:"limit"`
}

type GetUsersOrderedByRatioForGivenBrandRow struct {
	ID        int32   `json:"id"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
	Ratio     float32 `json:"ratio"`
}

// SELECT users for given brand ordered by ratio
func (q *Queries) GetUsersOrderedByRatioForGivenBrand(ctx context.Context, arg GetUsersOrderedByRatioForGivenBrandParams) ([]GetUsersOrderedByRatioForGivenBrandRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersOrderedByRatioForGivenBrand,
		arg.BrandID,
		arg.FromDate,
		arg.ToDate,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersOrderedByRatioForGivenBrandRow
	for rows.Next() {
		var i GetUsersOrderedByRatioForGivenBrandRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Ratio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserBrandRatio = `-- name: InsertUserBrandRatio :exec
INSERT INTO user_brand_sale_type_ratio (user_id, brand_id, sale_type_id, ratio, from_date, to_date)
VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (user_id, brand_id, sale_type_id, from_date, to_date)
DO
UPDATE SET ratio = EXCLUDED.ratio
`

type InsertUserBrandRatioParams struct {
	UserID     int32     `json:"user_id"`
	BrandID    int32     `json:"brand_id"`
	SaleTypeID int32     `json:"sale_type_id"`
	Ratio      float32   `json:"ratio"`
	FromDate   time.Time `json:"from_date"`
	ToDate     time.Time `json:"to_date"`
}

func (q *Queries) InsertUserBrandRatio(ctx context.Context, arg InsertUserBrandRatioParams) error {
	_, err := q.db.ExecContext(ctx, insertUserBrandRatio,
		arg.UserID,
		arg.BrandID,
		arg.SaleTypeID,
		arg.Ratio,
		arg.FromDate,
		arg.ToDate,
	)
	return err
}
