// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: good.sql

package generated

import (
	"context"
)

const addGoodToBrand = `-- name: AddGoodToBrand :exec
INSERT INTO brand_goods (brand_id, good_id)
VALUES ($1, $2)
`

type AddGoodToBrandParams struct {
	BrandID int32 `json:"brand_id"`
	GoodID  int32 `json:"good_id"`
}

func (q *Queries) AddGoodToBrand(ctx context.Context, arg AddGoodToBrandParams) error {
	_, err := q.db.ExecContext(ctx, addGoodToBrand, arg.BrandID, arg.GoodID)
	return err
}

const createGood = `-- name: CreateGood :one
INSERT INTO goods (name, description)
VALUES ($1, $2) RETURNING id
`

type CreateGoodParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateGood(ctx context.Context, arg CreateGoodParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createGood, arg.Name, arg.Description)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getGoodsByBrandId = `-- name: GetGoodsByBrandId :many
SELECT m.id, m.name, m.description
FROM goods m
         JOIN brand_goods bm ON m.id = bm.good_id
WHERE bm.brand_id = $1
`

type GetGoodsByBrandIdRow struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) GetGoodsByBrandId(ctx context.Context, brandID int32) ([]GetGoodsByBrandIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getGoodsByBrandId, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGoodsByBrandIdRow
	for rows.Next() {
		var i GetGoodsByBrandIdRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
