// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: branch.sql

package generated

import (
	"context"
	"time"
)

const createBranch = `-- name: CreateBranch :exec
INSERT INTO branches (title, description)
VALUES ($1, $2)
`

type CreateBranchParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) error {
	_, err := q.db.ExecContext(ctx, createBranch, arg.Title, arg.Description)
	return err
}

const getBranchBrandGoalByGivenDateRange = `-- name: GetBranchBrandGoalByGivenDateRange :one
SELECT COALESCE(bg.value, 0) AS goal_amount
FROM branch_brand_sale_type_goals bg
WHERE bg.branch_brand = $1
  AND bg.from_date = $2
  AND bg.to_date = $3
  AND bg.sale_type_id = $4
`

type GetBranchBrandGoalByGivenDateRangeParams struct {
	BranchBrand int32     `json:"branch_brand"`
	FromDate    time.Time `json:"from_date"`
	ToDate      time.Time `json:"to_date"`
	SaleTypeID  int32     `json:"sale_type_id"`
}

func (q *Queries) GetBranchBrandGoalByGivenDateRange(ctx context.Context, arg GetBranchBrandGoalByGivenDateRangeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBranchBrandGoalByGivenDateRange,
		arg.BranchBrand,
		arg.FromDate,
		arg.ToDate,
		arg.SaleTypeID,
	)
	var goal_amount int64
	err := row.Scan(&goal_amount)
	return goal_amount, err
}

const getBranchById = `-- name: GetBranchById :one
SELECT id, title, description, created_at
FROM branches
WHERE id = $1
`

func (q *Queries) GetBranchById(ctx context.Context, id int32) (Branch, error) {
	row := q.db.QueryRowContext(ctx, getBranchById, id)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getBranches = `-- name: GetBranches :many
SELECT id, title, description, created_at
FROM branches
`

func (q *Queries) GetBranches(ctx context.Context) ([]Branch, error) {
	rows, err := q.db.QueryContext(ctx, getBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Branch
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
