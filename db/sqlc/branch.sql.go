// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: branch.sql

package generated

import (
	"context"
	"time"
)

const createBranch = `-- name: CreateBranch :exec
INSERT INTO branches (title, description, branch_key)
VALUES ($1, $2, $3)
`

type CreateBranchParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	BranchKey   string `json:"branch_key"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) error {
	_, err := q.db.ExecContext(ctx, createBranch, arg.Title, arg.Description, arg.BranchKey)
	return err
}

const getBranchById = `-- name: GetBranchById :one
SELECT id, title, description, branch_key, created_at
FROM branches
WHERE id = $1
`

func (q *Queries) GetBranchById(ctx context.Context, id int32) (Branch, error) {
	row := q.db.QueryRowContext(ctx, getBranchById, id)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.BranchKey,
		&i.CreatedAt,
	)
	return i, err
}

const getBranchGoalByGivenDateRange = `-- name: GetBranchGoalByGivenDateRange :one
SELECT COALESCE(bg.amount, 0) AS goal_amount
FROM branch_goals_by_types bg
WHERE bg.id = $1
  AND bg.from_date = $2
  AND bg.to_date = $3
  AND bg.type_id = $4
`

type GetBranchGoalByGivenDateRangeParams struct {
	ID       int32     `json:"id"`
	FromDate time.Time `json:"from_date"`
	ToDate   time.Time `json:"to_date"`
	TypeID   int32     `json:"type_id"`
}

func (q *Queries) GetBranchGoalByGivenDateRange(ctx context.Context, arg GetBranchGoalByGivenDateRangeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBranchGoalByGivenDateRange,
		arg.ID,
		arg.FromDate,
		arg.ToDate,
		arg.TypeID,
	)
	var goal_amount int64
	err := row.Scan(&goal_amount)
	return goal_amount, err
}
