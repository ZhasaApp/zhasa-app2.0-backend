// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: branch.sql

package generated

import (
	"context"
	"time"
)

const createBranch = `-- name: CreateBranch :exec
INSERT INTO branches (title, description)
VALUES ($1, $2)
`

type CreateBranchParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) error {
	_, err := q.db.ExecContext(ctx, createBranch, arg.Title, arg.Description)
	return err
}

const getBranchBrandGoalByGivenDateRange = `-- name: GetBranchBrandGoalByGivenDateRange :one
SELECT COALESCE(bg.value, 0) AS goal_amount
FROM branch_brand_sale_type_goals bg
WHERE bg.branch_brand = $1
  AND bg.from_date = $2
  AND bg.to_date = $3
  AND bg.sale_type_id = $4
`

type GetBranchBrandGoalByGivenDateRangeParams struct {
	BranchBrand int32     `json:"branch_brand"`
	FromDate    time.Time `json:"from_date"`
	ToDate      time.Time `json:"to_date"`
	SaleTypeID  int32     `json:"sale_type_id"`
}

func (q *Queries) GetBranchBrandGoalByGivenDateRange(ctx context.Context, arg GetBranchBrandGoalByGivenDateRangeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBranchBrandGoalByGivenDateRange,
		arg.BranchBrand,
		arg.FromDate,
		arg.ToDate,
		arg.SaleTypeID,
	)
	var goal_amount int64
	err := row.Scan(&goal_amount)
	return goal_amount, err
}

const getBranchById = `-- name: GetBranchById :one
SELECT id, title, description, created_at
FROM branches
WHERE id = $1
`

func (q *Queries) GetBranchById(ctx context.Context, id int32) (Branch, error) {
	row := q.db.QueryRowContext(ctx, getBranchById, id)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getBranches = `-- name: GetBranches :many
SELECT id, title, description, created_at
FROM branches
`

func (q *Queries) GetBranches(ctx context.Context) ([]Branch, error) {
	rows, err := q.db.QueryContext(ctx, getBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Branch
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranchesByBrandId = `-- name: GetBranchesByBrandId :many
SELECT b.id, b.title, b.description
FROM branches b
         JOIN branch_brands bb ON b.id = bb.branch_id
WHERE bb.brand_id = $1
`

type GetBranchesByBrandIdRow struct {
	ID          int32  `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) GetBranchesByBrandId(ctx context.Context, brandID int32) ([]GetBranchesByBrandIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getBranchesByBrandId, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBranchesByBrandIdRow
	for rows.Next() {
		var i GetBranchesByBrandIdRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectBranchBrandUserByRole = `-- name: SelectBranchBrandUserByRole :many
SELECT u.id,
       u.first_name,
       u.last_name,
       u.avatar_url,
       b.title              AS branch_title,
       b.id                 AS branch_id
FROM user_avatar_view u
         JOIN user_roles ur ON u.id = ur.user_id
         JOIN branch_users bu ON u.id = bu.user_id
         JOIN branches b ON bu.branch_id = b.id
WHERE ur.role_id = $1
`

type SelectBranchBrandUserByRoleRow struct {
	ID          int32  `json:"id"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	AvatarUrl   string `json:"avatar_url"`
	BranchTitle string `json:"branch_title"`
	BranchID    int32  `json:"branch_id"`
}

func (q *Queries) SelectBranchBrandUserByRole(ctx context.Context, roleID int32) ([]SelectBranchBrandUserByRoleRow, error) {
	rows, err := q.db.QueryContext(ctx, selectBranchBrandUserByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectBranchBrandUserByRoleRow
	for rows.Next() {
		var i SelectBranchBrandUserByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.AvatarUrl,
			&i.BranchTitle,
			&i.BranchID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setBranchBrandGoal = `-- name: SetBranchBrandGoal :exec
INSERT INTO branch_brand_sale_type_goals (branch_brand, sale_type_id, value, from_date, to_date)
VALUES ($1, $2, $3, $4, $5) ON CONFLICT (branch_brand, sale_type_id, from_date, to_date) DO
UPDATE
    SET value = $3
`

type SetBranchBrandGoalParams struct {
	BranchBrand int32     `json:"branch_brand"`
	SaleTypeID  int32     `json:"sale_type_id"`
	Value       int64     `json:"value"`
	FromDate    time.Time `json:"from_date"`
	ToDate      time.Time `json:"to_date"`
}

func (q *Queries) SetBranchBrandGoal(ctx context.Context, arg SetBranchBrandGoalParams) error {
	_, err := q.db.ExecContext(ctx, setBranchBrandGoal,
		arg.BranchBrand,
		arg.SaleTypeID,
		arg.Value,
		arg.FromDate,
		arg.ToDate,
	)
	return err
}
